--- ./CMakeLists.txt.orig	2019-07-06 11:46:43.000000000 +0200
+++ ./CMakeLists.txt	2019-07-10 11:33:27.040761000 +0200
@@ -223,7 +223,7 @@
 
 if (NOT MSVC)
    set(CMAKE_CXX_FLAGS_DEBUG   "-g")
-   set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG -DQT_NO_DEBUG")
+   set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -DQT_NO_DEBUG")
 endif (NOT MSVC)
 
 if (APPLE)
@@ -306,7 +306,7 @@
        SET(Mscore_SHARE_NAME    "mscore.app/")
   endif(MINGW OR MSVC)
 else (MINGW OR MSVC OR APPLE)
-      SET(Mscore_INSTALL_NAME  "mscore${MSCORE_INSTALL_SUFFIX}-${MUSESCORE_VERSION}/")
+      SET(Mscore_INSTALL_NAME  "mscore${MSCORE_INSTALL_SUFFIX}/")
       SET(Mscore_SHARE_NAME    "share/")
 endif (MINGW OR MSVC OR APPLE)
 
@@ -505,12 +505,12 @@
         add_library(portaudiodll SHARED IMPORTED)
         set_target_properties(portaudiodll PROPERTIES IMPORTED_IMPLIB ${PORTAUDIO_LIBRARY})
     else (MINGW OR MSVC)
-        PKGCONFIG1 (portaudio-2.0 19 PORTAUDIO_INCDIR PORTAUDIO_LIBDIR PORTAUDIO_LIB PORTAUDIO_CPP)
+        PKGCONFIG1 (portaudio 19 PORTAUDIO_INCDIR PORTAUDIO_LIBDIR PORTAUDIO_LIB PORTAUDIO_CPP)
         if (PORTAUDIO_INCDIR)
               message("PortAudio found. PortAudio support enabled. INCDIR ${PORTAUDIO_INCDIR}, LIBDIR ${PORTAUDIO_LIBDIR}, LIB ${PORTAUDIO_LIB}")
               set ( USE_PORTAUDIO 1 )
         else (PORTAUDIO_INCDIR)
-              message(SEND_ERROR "Error: PortAudio support requested (BUILD_PORTAUDIO=${BUILD_PORTAUDIO}), but portaudio-2.0 version 19 was not found (package portaudio19-dev)")
+              message(SEND_ERROR "Error: PortAudio support requested (BUILD_PORTAUDIO=${BUILD_PORTAUDIO}), but portaudio version 19 was not found (package portaudio19-dev)")
         endif (PORTAUDIO_INCDIR)
     endif (MINGW OR MSVC)
 else (BUILD_PORTAUDIO)
@@ -692,7 +692,7 @@
             )
     endif (GZIP_EXECUTABLE AND NOT CMAKE_SYSTEM_NAME MATCHES "OpenBSD")
     # Install man pages in either compressed or uncompressed form
-    install( FILES ${MAN_BUILD} DESTINATION share/man/man1 COMPONENT doc)
+    install( FILES ${MAN_BUILD} DESTINATION man/man1 COMPONENT doc)
     # Create symlink alias for man pages so `man musescore` = `man mscore`
     find_program( LN_EXECUTABLE ln DOC "A tool for creating symbolic link aliases (optional)." )
     if (LN_EXECUTABLE)
@@ -703,7 +703,7 @@
             COMMAND ${LN_EXECUTABLE} -sf "${MAN_FULL_NAME}" "${MAN_FULL_ALIAS}"
             COMMAND echo 'Symlink alias: ${MAN_FULL_ALIAS} -> ${MAN_FULL_NAME}'
             )
-        install( FILES ${PROJECT_BINARY_DIR}/${MAN_FULL_ALIAS} DESTINATION share/man/man1 COMPONENT doc)
+        install( FILES ${PROJECT_BINARY_DIR}/${MAN_FULL_ALIAS} DESTINATION man/man1 COMPONENT doc)
      else (LN_EXECUTABLE)
          message(STATUS "'ln' not found (it is optional). No symlink aliases will be created.")
      endif (LN_EXECUTABLE)
@@ -730,8 +730,8 @@
 # MSVC does not require these targets, as all.h is not copied and the
 #   PCH generation is done per-project
 if (NOT MSVC)
-   ADD_CUSTOM_TARGET(mops1 DEPENDS ${PROJECT_BINARY_DIR}/all.h)
-   ADD_CUSTOM_TARGET(mops2 DEPENDS ${PCH})
+   ADD_CUSTOM_TARGET(mops1 DEPENDS ) # ${PROJECT_BINARY_DIR}/all.h)
+   ADD_CUSTOM_TARGET(mops2 DEPENDS ) # ${PCH})
 endif (NOT MSVC)
 
 ##
